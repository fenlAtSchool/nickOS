globalThis.drawDisplay = function(id){
  let f = Array(config.displayx * config.displayy).fill({str: '\u2588', style: {color: [255,255,255]}})
  for(let i of windows){
    for(let j = 0; j < i.x; j++){
      for(let z = 0; z < i.y; z++){
        f[display.x * (i.startx + j) + i.starty + z].style.color = i.win[z][j]
      }
    }
  }
  api.setFlyingMiddleMessage(id,f,0)
}

globalThis.Window = class{
  constructor(startx, starty, x, y){
    this.startx = startx
    this.starty = starty
    this.x = x + 2
    this.y = y + 2
    this.win = Array(y).fill(Array(x).fill(config.DARK))
  }
  fillInOutline(x1, x2, y1, y2){
    for(let i = y1; i < y2 + 1; i++){
      this.win[x1][i] = config.DARK
      this.win[x2][i] = config.DARK
    }
    for(let i = x1; i < x2 + 1; i++){
      this.win[i][y1] = config.DARK
      this.win[i][y2] = config.DARK
    }
  }
  dtxt(x,y, f, xlim = this.x, ylim = this.y){
    let dx = x
    for(let i= 0; i < f.length && y < ylim; i++){
      if(f[i] === '\n'){
        y += 4
        continue
      }
      for(let j = 0; j < 5; j++){
        for(let z = 0; z < 3; z++){
          this.win[y + j][x + z] = font[f[i]][j][z]
        }
      }
      x += 4
      if(x > xlim){
        x = dx
      }
    }
  }

  setPixel(x,y, z){
    this.win[x][y] = z
  }
  getPixel(x,y){
    return this.win[x][y]
  }
}

windows = []
