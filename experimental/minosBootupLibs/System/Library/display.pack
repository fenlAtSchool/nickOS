globalThis.drawDisplay = function(id = user){
  screen = Array.from({length: config.displayy}, () => Array(config.displayx).fill(config.light))
  for(let i of Object.values(windows)){
    i.render()
  }
  disx = 0
  disy = 0
  requestExecFunction(dis, '')
}
globalThis.dis = function(){
  if(disy < config.displayy){
    requestExecFunction(dis, '')
  }
  while(1){
    api.setBlock([disx - config.displayx/2,config.displayy - disy,50], screen[disy][disx])
    disx++
    if(disx == config.displayx){
      disy++
      disx = 0
    }
    if(disy == config.displayy){
      return ''
    }
  }
}

globalThis.Window = class{
  constructor(startx, starty, x, y){
    this.startx = startx
    this.starty = starty
    this.x = x
    this.y = y
    this.isVisible = true
    this.win = Array.from({length: y}, () => Array(x).fill(config.light))
  }
  fillInOutline(x1, x2, y1, y2){
    for(let i = y1; i < y2 + 1; i++){
      this.win[x1][i] = config.dark
      this.win[x2][i] = config.dark
    }
    for(let i = x1; i < x2 + 1; i++){
      this.win[i][y1] = config.dark
      this.win[i][y2] = config.dark
    }
  }
  dtxt(x,y, f, on = 86, off = 144,xlim = this.x, ylim = this.y){
    let dx = x
    for(let i= 0; i < f.length && y < ylim; i++){
      if(f[i] === '\\n'){
        y += 6
        continue
      }
      for(let j = 0; j < 5; j++){
        for(let z = 0; z < 3; z++){
          this.win[x + z][y + j] = font[f[i]][3*j+z] == "#" ? on : off
        }
      }
      x += 4
      if(x > xlim){
        x = dx
        y += 6
      }
    }
  }

  setPixel(x,y, z){
    this.win[x][y] = z
  }
  getPixel(x,y){
    return this.win[x][y]
  }
  setVisibility(x){
    this.isVisible = x
  }
  render(){
    if(!this.isVisible){
      return
    }
    for(let j = 0; j < this.x; j++){
      for(let z = 0; z < this.y; z++){
        screen[this.startx + j][this.starty + z] = this.win[z][j]
      }
    }
  }
}

windows = []
